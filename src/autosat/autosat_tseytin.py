# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _autosat_tseytin
else:
    import _autosat_tseytin

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _autosat_tseytin.delete_SwigPyIterator

    def value(self):
        return _autosat_tseytin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _autosat_tseytin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _autosat_tseytin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _autosat_tseytin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _autosat_tseytin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _autosat_tseytin.SwigPyIterator_copy(self)

    def next(self):
        return _autosat_tseytin.SwigPyIterator_next(self)

    def __next__(self):
        return _autosat_tseytin.SwigPyIterator___next__(self)

    def previous(self):
        return _autosat_tseytin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _autosat_tseytin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _autosat_tseytin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _autosat_tseytin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _autosat_tseytin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _autosat_tseytin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _autosat_tseytin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _autosat_tseytin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _autosat_tseytin:
_autosat_tseytin.SwigPyIterator_swigregister(SwigPyIterator)

class Tseytin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    all_feasible = property(_autosat_tseytin.Tseytin_all_feasible_get, _autosat_tseytin.Tseytin_all_feasible_set)
    settings_to_rule_out = property(_autosat_tseytin.Tseytin_settings_to_rule_out_get, _autosat_tseytin.Tseytin_settings_to_rule_out_set)
    greedy_solution = property(_autosat_tseytin.Tseytin_greedy_solution_get, _autosat_tseytin.Tseytin_greedy_solution_set)
    heuristic_solution = property(_autosat_tseytin.Tseytin_heuristic_solution_get, _autosat_tseytin.Tseytin_heuristic_solution_set)

    def setup(self, bits, behavior, literal_limit):
        return _autosat_tseytin.Tseytin_setup(self, bits, behavior, literal_limit)

    def fill_matrix(self, buffer):
        return _autosat_tseytin.Tseytin_fill_matrix(self, buffer)

    def compute_greedy_solution(self):
        return _autosat_tseytin.Tseytin_compute_greedy_solution(self)

    def heuristic_solve(self, bits, behavior):
        return _autosat_tseytin.Tseytin_heuristic_solve(self, bits, behavior)

    def __init__(self):
        _autosat_tseytin.Tseytin_swiginit(self, _autosat_tseytin.new_Tseytin())
    __swig_destroy__ = _autosat_tseytin.delete_Tseytin

# Register Tseytin in _autosat_tseytin:
_autosat_tseytin.Tseytin_swigregister(Tseytin)


def python_helper_size_t_to_double_ptr(x):
    return _autosat_tseytin.python_helper_size_t_to_double_ptr(x)
class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autosat_tseytin.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autosat_tseytin.vectori___nonzero__(self)

    def __bool__(self):
        return _autosat_tseytin.vectori___bool__(self)

    def __len__(self):
        return _autosat_tseytin.vectori___len__(self)

    def __getslice__(self, i, j):
        return _autosat_tseytin.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autosat_tseytin.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autosat_tseytin.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autosat_tseytin.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autosat_tseytin.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autosat_tseytin.vectori___setitem__(self, *args)

    def pop(self):
        return _autosat_tseytin.vectori_pop(self)

    def append(self, x):
        return _autosat_tseytin.vectori_append(self, x)

    def empty(self):
        return _autosat_tseytin.vectori_empty(self)

    def size(self):
        return _autosat_tseytin.vectori_size(self)

    def swap(self, v):
        return _autosat_tseytin.vectori_swap(self, v)

    def begin(self):
        return _autosat_tseytin.vectori_begin(self)

    def end(self):
        return _autosat_tseytin.vectori_end(self)

    def rbegin(self):
        return _autosat_tseytin.vectori_rbegin(self)

    def rend(self):
        return _autosat_tseytin.vectori_rend(self)

    def clear(self):
        return _autosat_tseytin.vectori_clear(self)

    def get_allocator(self):
        return _autosat_tseytin.vectori_get_allocator(self)

    def pop_back(self):
        return _autosat_tseytin.vectori_pop_back(self)

    def erase(self, *args):
        return _autosat_tseytin.vectori_erase(self, *args)

    def __init__(self, *args):
        _autosat_tseytin.vectori_swiginit(self, _autosat_tseytin.new_vectori(*args))

    def push_back(self, x):
        return _autosat_tseytin.vectori_push_back(self, x)

    def front(self):
        return _autosat_tseytin.vectori_front(self)

    def back(self):
        return _autosat_tseytin.vectori_back(self)

    def assign(self, n, x):
        return _autosat_tseytin.vectori_assign(self, n, x)

    def resize(self, *args):
        return _autosat_tseytin.vectori_resize(self, *args)

    def insert(self, *args):
        return _autosat_tseytin.vectori_insert(self, *args)

    def reserve(self, n):
        return _autosat_tseytin.vectori_reserve(self, n)

    def capacity(self):
        return _autosat_tseytin.vectori_capacity(self)
    __swig_destroy__ = _autosat_tseytin.delete_vectori

# Register vectori in _autosat_tseytin:
_autosat_tseytin.vectori_swigregister(vectori)

class vectorvectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autosat_tseytin.vectorvectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autosat_tseytin.vectorvectori___nonzero__(self)

    def __bool__(self):
        return _autosat_tseytin.vectorvectori___bool__(self)

    def __len__(self):
        return _autosat_tseytin.vectorvectori___len__(self)

    def __getslice__(self, i, j):
        return _autosat_tseytin.vectorvectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autosat_tseytin.vectorvectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autosat_tseytin.vectorvectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autosat_tseytin.vectorvectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autosat_tseytin.vectorvectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autosat_tseytin.vectorvectori___setitem__(self, *args)

    def pop(self):
        return _autosat_tseytin.vectorvectori_pop(self)

    def append(self, x):
        return _autosat_tseytin.vectorvectori_append(self, x)

    def empty(self):
        return _autosat_tseytin.vectorvectori_empty(self)

    def size(self):
        return _autosat_tseytin.vectorvectori_size(self)

    def swap(self, v):
        return _autosat_tseytin.vectorvectori_swap(self, v)

    def begin(self):
        return _autosat_tseytin.vectorvectori_begin(self)

    def end(self):
        return _autosat_tseytin.vectorvectori_end(self)

    def rbegin(self):
        return _autosat_tseytin.vectorvectori_rbegin(self)

    def rend(self):
        return _autosat_tseytin.vectorvectori_rend(self)

    def clear(self):
        return _autosat_tseytin.vectorvectori_clear(self)

    def get_allocator(self):
        return _autosat_tseytin.vectorvectori_get_allocator(self)

    def pop_back(self):
        return _autosat_tseytin.vectorvectori_pop_back(self)

    def erase(self, *args):
        return _autosat_tseytin.vectorvectori_erase(self, *args)

    def __init__(self, *args):
        _autosat_tseytin.vectorvectori_swiginit(self, _autosat_tseytin.new_vectorvectori(*args))

    def push_back(self, x):
        return _autosat_tseytin.vectorvectori_push_back(self, x)

    def front(self):
        return _autosat_tseytin.vectorvectori_front(self)

    def back(self):
        return _autosat_tseytin.vectorvectori_back(self)

    def assign(self, n, x):
        return _autosat_tseytin.vectorvectori_assign(self, n, x)

    def resize(self, *args):
        return _autosat_tseytin.vectorvectori_resize(self, *args)

    def insert(self, *args):
        return _autosat_tseytin.vectorvectori_insert(self, *args)

    def reserve(self, n):
        return _autosat_tseytin.vectorvectori_reserve(self, n)

    def capacity(self):
        return _autosat_tseytin.vectorvectori_capacity(self)
    __swig_destroy__ = _autosat_tseytin.delete_vectorvectori

# Register vectorvectori in _autosat_tseytin:
_autosat_tseytin.vectorvectori_swigregister(vectorvectori)



